{
  // Place your rogers workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  // SECTION: REACT COMPONENT
  "new: typeScriptReactFunctionalComponent": {
    "prefix": "new-Component",
    "body": [
      "import React, { FC } from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}}: FC = () => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Functional Component"
  },
  "new: typeScriptReactFunctionalComponentProps": {
    "prefix": "new-ComponentProps",
    "body": [
      "import React, { FC } from 'react'",
      "",
      "interface I${1:${TM_FILENAME_BASE}}Props {",
      "\t${2:prop}: ${3|string,boolean,() => void|}",
      "}",
      "",
      "const ${1:${TM_FILENAME_BASE}}: FC<I${1:${TM_FILENAME_BASE}}Props> = ({ ${2:prop} }) => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t{${2:prop}}$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Functional Component with props + TS interface"
  },
  // SECTION: React Hook Form
  "new: reactHookForm": {
    "prefix": "new-ReactHookForm",
    "body": [
      "import React, { FC } from 'react'",
      "import { useForm } from 'react-hook-form'",
      "import { yupResolver } from '@hookform/resolvers'",
      "import { Button, ButtonTypes } from 'components/atoms'",
      "import { ${3:Form}Schema, ${3:Form}SchemaType } from '$2'",
      "",
      "interface I${1:${TM_FILENAME_BASE}}Props {",
      "\tdefaultValues: ${3:Form}SchemaType",
      "\tonFormSubmit: (data: ${3:Form}SchemaType) => void",
      "\tapiErrors: string[]",
      "\tisLoading: boolean",
      "}",
      "",
      "const ${1:${TM_FILENAME_BASE}}: FC<I${1:${TM_FILENAME_BASE}}Props> = ({",
      "\t\tdefaultValues,",
      "\t\tonFormSubmit,",
      "\t\tapiErrors,",
      "\t\tisLoading,",
      "}) => {",
      "\tconst useFormProps = useForm({",
      "\t\tdefaultValues,",
      "\t\tmode: 'all',",
      "\t\tresolver: yupResolver(${3:Form}Schema),",
      "\t})",
      "",
      "\tconst { handleSubmit, control } = useFormProps",
      "",
      "\tconsole.log(apiErrors)",
      "",
      "\treturn (",
      "\t\t<form onSubmit={handleSubmit(onFormSubmit)}>",
      "\t\t\t$0",
      "\t\t\t<Button type='submit' typeClass={ButtonTypes.primary} disabled={isLoading}>",
      "\t\t\t\tSubmit",
      "\t\t\t</Button>",
      "\t\t</form>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Template for react-hook-form Form component"
  },
  // SECTION: REACT: ADD HELPERS
  "add: TSInterfaceAndProps": {
    "prefix": "add-Props",
    "body": [
      "",
      "interface I${1:${TM_FILENAME_BASE}}Props {",
      "\t${2:props}: ${3|string,boolean,() => void|}",
      "}",
      "",
      "const ${1:${TM_FILENAME_BASE}}: FC<I${1:${TM_FILENAME_BASE}}Props> = (props) => {"
    ],
    "description": "Adds props + TS interface"
  },
  "add: useState": {
    "prefix": "useState",
    "body": "const [$1, set$1] = useState<$2>($0)",
    "description": "Adds useState template"
  },
  "add: useEffect": {
    "prefix": "useEffect",
    "body": ["useEffect(() => {", "\t$1", "},[$0])"],
    "description": "Adds useEffect template"
  },
  // SECTION: REACT: CREATE FROM CLIPBOARD
  "clipboard: react component": {
    "prefix": "clip-component",
    "body": [
      "const ${0:NewComponent}: FC = () => {",
      "\treturn (",
      "\t\t${CLIPBOARD}",
      "\t)",
      "}",
      ""
    ],
    "description": "Create new component from clipboard contents"
  },
  "clipboard: react component with ts interface": {
    "prefix": "clip-component",
    "body": [
      "const ${0:NewComponent}: FC = () => {",
      "\treturn (",
      "\t\t${CLIPBOARD}",
      "\t)",
      "}",
      ""
    ],
    "description": "Create new component from clipboard contents"
  },
  // SECTION: COMPONENT UNIT TESTS
  "new: unitTest": {
    "prefix": "new-TestComponent",
    "body": [
      "import React from 'react'",
      "import { screen, fireEvent, waitFor, cleanup, render } from '@testing-library/react'",
      "import userEvent from '@testing-library/user-event'",
      "import ${1:${TM_FILENAME_BASE/(.*)\\..+$/$1/}} from './${1:${TM_FILENAME_BASE}}'",
      "",
      "// See https://testing-library.com/docs/react-testing-library/cheatsheet",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "",
      "\tbeforeEach(() => {",
      "\t\trender(<${1:${TM_FILENAME_BASE}} />)",
      "\t})",
      "",
      "\tafterEach(cleanup)",
      "",
      "\tit('renders $0', () => {",
      "\t\texpect(screen.getByText(/text/)).toBeTruthy()",
      "\t})",
      "",
      "})",
      "",
      "// npx jest ${TM_FILEPATH} --watch",
      ""
    ],
    "description": "Test: New Component spec file"
  },
  "add: TestRenderBlock": {
    "prefix": "add-test-RenderBlock",
    "body": [
      "",
      "\tit('renders $0', () => {",
      "\t\texpect(screen.getByText(/text/)).toBeTruthy()",
      "\t\texpect(screen.getByTestId('data-test')).toBeTruthy()",
      "\t\texpect(screen.getByRole('button', { name: 'Submit' })).toBeTruthy()",
      "\t})",
      ""
    ],
    "description": "Test: Adds async & user events test block"
  },
  "add: TestAsyncBlock": {
    "prefix": "add-test-AsyncBlock",
    "body": [
      "",
      "\tit('should allow user to enter values$2', async () => {",
      "\t\tfireEvent.change(screen.getByTestId('data-test'), { target: { value: 'VALUE' } }) ",
      "\t\tuserEvent.type(screen.getByTestId('data-test'), '{enter}')",
      "\t\tawait waitFor(() => expect(screen.getByText(/text/i)).toBeTruthy())",
      "\t})",
      ""
    ],
    "description": "Test: Adds async & user events test block"
  },
  "add: TestReduxProvider": {
    "prefix": "add-test-ReduxProvider",
    "body": [
      "import { Provider } from 'react-redux'",
      "import { createStore } from 'redux'",
      "",
      "const Component = () => {",
      "\tconst store = {}",
      "",
      "\treturn(",
      "\t\t<Provider store={createStore(() => store)}>",
      "\t\t\t<${1:${TM_FILENAME_BASE}} />",
      "\t\t</Provider>",
      "\t)",
      "}",
      ""
    ],
    "description": "Test: Adds redux to component spec"
  },
  // SECTION: UTIL TESTS
  "new: unitUtilTest": {
    "prefix": "new-TestUtil",
    "body": [
      "import { ${1:${TM_FILENAME_BASE}} } from './${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('${1:${TM_FILENAME_BASE}}', () => {",
      "\tit('$0', () => {",
      "\t\tconst valueCheck = ${1:${TM_FILENAME_BASE}}()",
      "\t\texpect(valueCheck).toBeTruthy()",
      "\t})",
      "})",
      "",
      "// npx jest ${TM_FILEPATH} --watch",
      ""
    ],
    "description": "Test: New Util spec file"
  },
  // SECTION: E2E TESTS
  "new: E2E Test": {
    "prefix": "new-Test E2E",
    "body": [
      "describe('${1:ON_THIS_PAGE}', () => {",
      "\tbeforeEach(() => {",
      "\t\tcy.login()",
      "\t\tcy.vendorStubs()",
      "\t\tcy.route('GET', '$2', {user: {}}).as('userStub')",
      "\t\tcy.visit('/')",
      "\t\tcy.wait('@userStub')",
      "\t})",
      "\t\t",
      "\tit('${0:USER_TAKES_ACTION}', () => {",
      "\t\tcy.dataTest('').click()",
      "\t})",
      "})",
      ""
    ],
    "description": "Test: New e2e (cypress) spec file"
  },
  "add: e2eItBlock": {
    "prefix": "add-e2eItBlock",
    "body": [
      "\tit('${0:USER_TAKES_ACTION}', () => {",
      "\t\tcy.dataTest('').click()",
      "\t})"
    ],
    "description": "Test: Add describe block to e2e spec"
  },
  "add: e2eRoute": {
    "prefix": "cy.route",
    "body": "cy.route('GET', '$0', {$1}).as('$2')",
    "description": "Test: Add cy.route()"
  },
  // SECTION: JAVASCRIPT
  "clipboard: variable": {
    "prefix": "clip-variable",
    "body": "const ${0:variable} = ${CLIPBOARD}",
    "description": "Create new constant variable from clipboard contents"
  },
  "console log": {
    "prefix": "log",
    "body": "console.log(${CLIPBOARD})",
    "description": "Console log"
  }
}
